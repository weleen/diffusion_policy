defaults:
  - _self_
  - task: pusht_image 

name: train_diffusion_light_transformer_hybrid
_target_: diffusion_policy.workspace.train_diffusion_light_transformer_hybrid_workspace.TrainDiffusionLightTransformerHybridWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

horizon: 10
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_cond: True

policy:
  _target_: diffusion_policy.policy.diffusion_light_transformer_hybrid_image_policy.DiffusionLightTransformerHybridImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: sample
    # beta_schedule: squaredcos_cap_v2
    # variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    # clip_sample: True # required when predict_epsilon=False
    # prediction_type: epsilon # or sample

  scheduler:
    _target_: diffusers.schedulers.scheduling_lcm.LCMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: sample

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_timesteps: 1
  num_inference_steps: 10

  crop_shape: [84, 84]
  obs_encoder_group_norm: True
  eval_fixed_crop: True

  n_layer: 8
  n_cond_layers: 0  # >0: use transformer encoder for cond, otherwise use MLP
  n_head: 4
  n_emb: 256
  p_drop_emb: 0.0
  p_drop_attn: 0.3
  causal_attn: True
  time_as_cond: True # if false, use BERT like encoder only arch, time as input
  obs_as_cond: ${obs_as_cond}

  # distillation
  use_consistency: True

  # prune by learning
  # 6 in 8: DP-T-D6-6-8 [[6, 8]], DP-T-D6-3-4 [[3, 4], [3, 4]];
  # 4 in 8: DP-T-D4-4-8 [[4, 8]], DP-T-D4-2-4 [[2, 4], [2, 4]], DP-T-D4-1-2 [[1, 2], [1, 2], [1, 2], [1, 2]];
  # 2 in 8: DP-T-D2-2-8 [[2, 8]], DP-T-D2-1-4 [[1, 4], [1, 4]]
  groups: [[6, 8]] # [[3, 4], [3, 4]]
  importance_score_type: "svdscore" # "biscore" # "svdscore", "fixed", "random"
  fixed_importance_score: 0.02

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  transformer_weight_decay: 1.0e-3
  obs_encoder_weight_decay: 1.0e-6
  gumbel_gates_lr_scale: 10.0
  learning_rate: 1.0e-4
  betas: [0.9, 0.95]

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  # Transformer needs LR warmup
  lr_warmup_steps: 1000
  num_epochs: 3050
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 50
  checkpoint_every: 50
  val_every: 1
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  # structure prune by learning
  scaling_range: [1e2, 1e2] # this controls the one-hotness of the learnable probability, see https://arxiv.org/abs/2409.17481
  tau_range: [4, 0.1] # this controls the temperature of the gumbel softmax.
  # lora
  lora_rank: 8
  lora: False # if True, enable lora
  # pretrained model
  pretrain:
    pretrained_model_path: data/experiments/image/pusht/diffusion_policy_transformer/train_0/checkpoints/epoch=0100-test_mean_score=0.748.ckpt
    use_ema: True
    exclude_keys: ['optimizer']
    include_keys: ['model', 'ema_model']

logging:
  project: diffusion_policy_prune_distill
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
